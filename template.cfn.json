{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Setup template for a HTTPS CloudFront S3 backed static website with a deployment pipeline",
    "Metadata": {
    },
    "Parameters": {
        "DomainName": {
            "Description": "Full DNS Domain Name the website will be resolved under. This will be used to create the S3 bucket, CloudFront CNAME and IAM SSL certificates",
            "Type": "String"
        },
        "Route53HostedZoneID": {
            "Description": "The existing Rote53 zone that will host the A records for the websites.",
            "Type": "AWS::Route53::HostedZone::Id"
        }
    },
    "Mappings": {
    },
    "Conditions": {
    },
    "Resources": {        
        "S3StaticSiteBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicRead",
                "BucketName": { "Fn::Sub": "www-${DomainName}" },
                "WebsiteConfiguration": {
                    "ErrorDocument" : "error.html",
                    "IndexDocument" : "index.html"
                }
            }
        },
        "HtmlCodeRepository": {
           "Type": "AWS::CodeCommit::Repository",
           "Properties": {
              "RepositoryDescription": { "Fn::Sub": "HTML Code Repository for ${DomainName}" },
              "RepositoryName": { "Fn::Sub": "html-${DomainName}" }
          }
        },
        "CloudfrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
               "DistributionConfig": {
                    "Aliases" : [ { "Ref": "DomainName" } ],
                    "Comment" : { "Ref": "DomainName" },
                    "DefaultCacheBehavior" : {
                        "CachePolicyId" : "658327ea-f89d-4fab-a63d-7e88639e58f6",
                        "Compress" : true,
                        "TargetOriginId" : "root-s3-website",
                        "ViewerProtocolPolicy" : "redirect-to-https"
                      },
                    "Origins" : [ {
                        "CustomOriginConfig" : {
                            "HTTPPort" : 80,
                            "OriginProtocolPolicy" : "http-only"
                          },
                        "DomainName" : { "Fn::Sub" : "www-${DomainName}.s3-website.${AWS::Region}.amazonaws.com" },
                        "Id" : "root-s3-website"
                      } ],                    
                    "DefaultRootObject" : "index.html",
                    "Enabled" : true,
                    "ViewerCertificate" : {
                        "AcmCertificateArn" : { "Ref": "HTTPSCertificate" },
                        "SslSupportMethod": "sni-only"
                      }
                    }
            }
         }, 
        "HTTPSCertificate" : {
            "Type" : "AWS::CertificateManager::Certificate",
            "Properties" : {
                "DomainName" : { "Ref": "DomainName" },
                "ValidationMethod" : "DNS",
                "DomainValidationOptions" : [ {
                    "DomainName" : { "Ref": "DomainName" },
                    "HostedZoneId" : { "Ref": "Route53HostedZoneID" }
                  }]
              }
        },
        "Route53ARecord" : {
            "Type": "AWS::Route53::RecordSet",
            "DependsOn": "CloudfrontDistribution",
            "Properties": {
                "Name": { "Ref": "DomainName" },
                "Type": "A",
                "AliasTarget": {
                    "DNSName": { "Fn::GetAtt": [ "CloudfrontDistribution", "DomainName" ] },
                    "HostedZoneId": "Z2FDTNDATAQYW2"
                },
                "HostedZoneId": { "Ref": "Route53HostedZoneID" }
            }
        },
        "LambdaCloudfrontInvalidate": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "ZipFile": { "Fn::Join": [ "\n", [
                "import boto3, time, os, json",
                "def handler(event, context):",
                "  cf_distrib_id = os.environ['CFDISTRIBUTIONID']",
                "  cp_job_id = event['CodePipeline.job']['id']",
                "  cloudfront = boto3.client('cloudfront')",
                "  codepipeline = boto3.client('codepipeline')",
                "  try:",
                "    cloudfront.create_invalidation( DistributionId=cf_distrib_id, InvalidationBatch={ 'Paths': { 'Quantity': 1, 'Items': [ '/*' ] }, 'CallerReference': str(time.time()) })",
                "  except Exception as ex:",
                "    print(ex)",
                "    codepipeline.put_job_failure_result(jobId=cp_job_id, failureDetails={ 'type': 'JobFailed', 'message': str(ex)})",
                "  else:",
                "    codepipeline.put_job_success_result(jobId=cp_job_id)"
              ]]}
            },
            "Handler": "index.handler",
            "Role": {"Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
            "Runtime": "python3.8",
            "FunctionName": { "Fn::Sub": "lambda-invalidate-cloudfront-${CloudfrontDistribution}" },
            "MemorySize": 128,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "CFDISTRIBUTIONID": { "Ref" : "CloudfrontDistribution" }
              }
            },
            "Description": { "Fn::Sub": "Lambda that invaldiates CF distribution for ${DomainName}" }
          }
        },
        "LambdaExecutionRole": {
           "Type": "AWS::IAM::Role",
           "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
                },
              "Policies": [ 
                {
                    "PolicyName": "policy-create-invalidation",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": "cloudfront:CreateInvalidation",
                                "Resource": { "Fn::Sub": "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudfrontDistribution}" }
                            }
                        ]
                    }
                },
                {
                    "PolicyName": "policy-codepipeline",
                    "PolicyDocument": {                    
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "codepipeline:PutJobFailureResult",
                                    "codepipeline:PutJobSuccessResult"
                                ],
                                "Resource": "*"                                
                            }
                        ]
                    }
                }                  
               ]
           }
        }
        
    },
    "Outputs": {

    }
}